
disp("execute synthesis_knn")
for iter = 1:test_num
    disp("#############################################");
    disp("#           test_feature extraction         #");
    disp("#############################################");
    testwav = testwavs(iter).folder+"\"+testwavs(iter).name;
    disp(testwav);
    [testaudio,testf0,testuv,testuv_T,testreg_ap,testbap,testsp,testspectra]=feature_extraction(testwav);
    testframe_size = size(testuv,2);
    testdata = zeros(testframe_size,ncc*2);
    test_melspecdata = zeros(testframe_size,ncc);

    f0_sequence = testf0.f0;
        if isfield(testf0, 'vuv')
            f0_sequence(testf0.vuv == 0) = default_f0;
        end

    for l = 1:testframe_size
        [coeffs,Melspectrum] = MFCC(testspectra,l,fs,ncc);

        current_f0 = f0_sequence(l);
        current_position = testf0.temporal_positions(l);
        waveform = GetWindowedWaveform(testaudio, fs, current_f0, current_position);
        power = sum(waveform.^2);
        log_power_db = 10 * log10(power + eps);
        coeffs(1) = log_power_db;
        coeffs = normalize(coeffs);
        testdata(l,1:ncc) = coeffs;
        test_melspecdata(l,1:ncc) = Melspectrum;

    end
    %動的特徴量を計算
    delta = calculate_delta(testdata(:,1:ncc),ncc);
    testdata(:,ncc+1:end) = delta;
    testdata_GV = testdata .* std_bonedata;
    %メルスペクトラム正規化
    test_melspecdata = test_melspecdata - min_value;

    disp("#############################################");
    disp("#                 knn apply                 #");
    disp("#############################################");
    %knnモデルに入力する特徴量
    mfcc_knn=struct( ...
                    'bonedata',bonedata, ...
                    'testdata',testdata, ...
                    'airuvT',airuv_allT, ...
                    'testuv',testuv, ...
                    'airspec_all',airspec_all, ...
                    'airrgap_all',airrgap_all, ...
                    'airbap_all',airbap_all, ...
                    'k',5 ...
                    );
    mfccGV_knn=struct( ...
                    'bonedata',bonedata_GV, ...
                    'testdata',testdata_GV, ...
                    'airuvT',airuv_allT, ...
                    'testuv',testuv, ...
                    'airspec_all',airspec_all, ...
                    'airrgap_all',airrgap_all, ...
                    'airbap_all',airbap_all, ...
                    'k',5 ...
                    );

    melsp_knn=struct( ...
                    'bonedata',melspecdata, ...
                    'testdata',test_melspecdata, ...
                    'airuvT',airuv_allT, ...
                    'testuv',testuv, ...
                    'airspec_all',airspec_all, ...
                    'airrgap_all',airrgap_all, ...
                    'airbap_all',airbap_all, ...
                    'k',5 ...
                    );
    
    %mfcc_knnモデルインスタンスの生成
    mfcc_knn_model = knn_model(mfcc_knn);
    mfcc_knn_result =mfcc_knn_model.output;
    mfcc_recsp=struct(...
                      'temporal_positions',testf0.temporal_positions, ...
                      'spectrogram',mfcc_knn_result.bone_air_spec, ...
                      'fs',fs ...
                      );
    mfcc_recap=struct( ...
                    'temporal_positions', testf0.temporal_positions, ...
                    'f0',testf0.f0, ...
                    'vuv',testf0.vuv, ...
                    'f0_candidates',testf0.f0_candidates, ...
                    'aperiodicity',mfcc_knn_result.bone_air_airrgap, ...
                    'coarse_ap',mfcc_knn_result.bone_air_airbap ...
                      );
    %mfccGV_knnモデルインスタンスの生成
    mfccGV_knn_model = knn_model(mfccGV_knn);
    mfccGV_knn_result =mfccGV_knn_model.output;
    mfccGV_recsp=struct(...
                      'temporal_positions',testf0.temporal_positions, ...
                      'spectrogram',mfccGV_knn_result.bone_air_spec, ...
                      'fs',fs ...
                      );
    mfccGV_recap=struct( ...
                    'temporal_positions', testf0.temporal_positions, ...
                    'f0',testf0.f0, ...
                    'vuv',testf0.vuv, ...
                    'f0_candidates',testf0.f0_candidates, ...
                    'aperiodicity',mfccGV_knn_result.bone_air_airrgap, ...
                    'coarse_ap',mfccGV_knn_result.bone_air_airbap ...
                      );
    %melsp_knnモデルインスタンスの生成
    melsp_knn_model = isdknn_model(melsp_knn);
    melsp_knn_result =melsp_knn_model.output;
    melsp_recsp=struct(...
                      'temporal_positions',testf0.temporal_positions, ...
                      'spectrogram',melsp_knn_result.bone_air_spec, ...
                      'fs',fs ...
                      );
    melsp_recap=struct( ...
                    'temporal_positions', testf0.temporal_positions, ...
                    'f0',testf0.f0, ...
                    'vuv',testf0.vuv, ...
                    'f0_candidates',testf0.f0_candidates, ...
                    'aperiodicity',melsp_knn_result.bone_air_airrgap, ...
                    'coarse_ap',melsp_knn_result.bone_air_airbap ...
                      );

    disp("#############################################");
    disp("#                synth voco                 #");
    disp("#############################################");

    if iter ==1
        mfcc_modelname=getname(mfcc_knn_model) +"_k" + num2str(mfcc_knn.k);
        mfcc_outdir = fullfile(parentdir, "data", "out_wav", mfcc_modelname);
        if ~exist(mfcc_outdir, 'dir')
            mkdir(mfcc_outdir);
        end
        mfccGV_modelname=getname(mfccGV_knn_model) +"_k" + num2str(mfccGV_knn.k);
        mfccGV_outdir = fullfile(parentdir, "data", "out_wav", mfccGV_modelname);
        if ~exist(mfccGV_outdir, 'dir')
            mkdir(mfccGV_outdir);
        end
        melsp_modelname=getname(melsp_knn_model) +"_k" + num2str(melsp_knn.k);
        melsp_outdir = fullfile(parentdir, "data", "out_wav", melsp_modelname);
        if ~exist(melsp_outdir, 'dir')
            mkdir(melsp_outdir);
        end
    end
    mfccy = Synthesis(mfcc_recap,mfcc_recsp);
    mfccY = normalize(mfccy, 'range', [-1, 1]);
    mfccGVy = Synthesis(mfccGV_recap,mfccGV_recsp);
    mfccGVY = normalize(mfccGVy, 'range', [-1, 1]);
    melspy = Synthesis(melsp_recap,melsp_recsp);
    melspY = normalize(melspy, 'range', [-1, 1]);

    wavname=fullfile(mfcc_outdir,testwavs(iter).name);
    audiowrite(wavname,mfccY,fs);
    wavname=fullfile(mfccGV_outdir,testwavs(iter).name);
    audiowrite(wavname,mfccGVY,fs);
    wavname=fullfile(melsp_outdir,testwavs(iter).name);
    audiowrite(wavname,melspY,fs);
    disp("process completed:"+testwav);
end
disp("#############################################");
disp("#        prosessing is all completed        #");
disp("#############################################");